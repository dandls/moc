% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_counterfactuals.R
\name{select_diverse}
\alias{select_diverse}
\alias{select_nondom}
\alias{computeCrowdingDistanceR}
\title{Select diverse candidates for new generation}
\usage{
select_diverse(control, population, offspring, fitness, fitness.offspring)

select_nondom(
  fitness,
  n.select,
  candidates,
  epsilon = Inf,
  extract.duplicates = TRUE
)

computeCrowdingDistanceR(fitness, candidates)
}
\value{
(list)
}
\description{
Replaces ecr::replaceMuPlusLambda,
and ecr::selNondom, because the functions are not able
to compute crowding distance also for feature space.
}
\section{Arguments}{

\describe{
\item{control: }{(ecr_control)\cr Object that holds information on
algorithm parameters.}
\item{population: }{(list)\cr Object that holds population.}
\item{offspring: }{(list)\cr Object that holds offspring.}
\item{fitness: }{(matrix)\cr Matrix of fitness values. Each column corresponds to
element of `population`.}
\item{fitness.offspring: }{(matrix)\cr Matrix of fitness values. Each column corresponds to
element of `offspring`.}
\item{n.select: }{(numeric(1))\cr Number of candidates, which are selected
for next generation.}
\item{epsilon: }{(numeric(1))\cr Soft constraint. If chosen, candidates, whose
  distance between their prediction and target exceeds epsilon, are penalized.}
\item{extract.duplicate}{(logical(1)) Whether to penalize duplicates and
move them to the last front in nondominated sorting. Default TRUE.}
\item{candidates}{(data.frame)\cr Data frame from which `n.select` best and most
diverse ones are chosen.}
}
}

